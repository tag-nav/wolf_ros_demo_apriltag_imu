# ProcessorBase
time_tolerance: 0.02
apply_loss_function: true

# ProcessorTracker
max_new_features: -1   # max number of features detected in detectNewFeatures() (-1: unlimited)

# MotionProvider
state_getter: true
state_priority: 2

# detector parameters:
quad_decimate:      0.0      # doing quad detection at lower resolution to speed things up (see end of file)
# quad_decimate:      1.5      # doing quad detection at lower resolution to speed things up (see end of file)
quad_sigma:         0.0	   # gaussian blur good for noisy images, may be recommended with quad_decimate. Kernel size adapted (see end of this file)
nthreads:           8       # how many thread during tag detection
debug:              false    # write some debugging images
refine_edges:       true    # better edge detection if quad_decimate > 1 (quite inexpensive, almost no diff)

ippe_min_ratio:     10 	# quite arbitrary, always > 1 (to deactive, set at something < 1)
ippe_max_rep_error: 10     # to deactivate, set at something big (100)
april_min_decision_margin: 100

tag_family:           "tag36h11"     # see in Wolf processor_tracker_landmark_apriltag.cpp for available families
tag_black_border:     1      # usually 1, 2 for Kalibr aprilgrid for ex
# tag widht used if tag width not specified
# tag_width_default:    0.2     # Simu $$
# tag_width_default:    0.055   # Calibration $$
# tag_width_default:    0.168   # pile of tags $$
tag_width_default:    0.161     # LAAS, Bauzil walls 07/22 $$

# specific tag widths if using tags of different sizes
# $tag_widths:
#   -1: 42

# solo3D poster
$tag_widths:
    3: 0.1675
    40: 0.1726
    41: 0.1726
    42: 0.1726
    43: 0.1726
    44: 0.1726
    45: 0.1726
    46: 0.1726

# choose the type of factor used when building the problem
use_proj_factor: false

# used for covariance propagation 
std_pix:          4   # pixel error $$

keyframe_vote:
  voting_active:              true
  nb_vote_for_every_first:    10
  min_time_span:              0.045    # s
  max_time_span:              0.055    # s ; note: this must be higher (i.e. slower) than the solve period in solver.yaml
  min_features_for_keyframe:  1

###############
# Apriltag settings
###############
# int nthreads;
# How many threads should be used?

# float quad_decimate;
# detection of quads can be done on a lower-resolution image,
# improving speed at a cost of pose accuracy and a slight
# decrease in detection rate. Decoding the binary payload is
# still done at full resolution. .
# ! Special optimized value of 1.5

# float quad_sigma;
# What Gaussian blur should be applied to the segmented image
# (used for quad detection?)  Parameter is the standard deviation
# in pixels.  Very noisy images benefit from non-zero values
# (e.g. 0.8).

# int refine_edges;
# When non-zero, the edges of the each quad are adjusted to "snap
# to" strong gradients nearby. This is useful when decimation is
# employed, as it can increase the quality of the initial quad
# estimate substantially. Generally recommended to be on (1).
# Very computationally inexpensive. Option is ignored if
# quad_decimate = 1.

# double decode_sharpening;
# How much sharpening should be done to decoded images? This
# can help decode small tags but may or may not help in odd
# lighting conditions or low light conditions.
# The default value is 0.25.

# int debug;
# When non-zero, write a variety of debugging images to the
# current working directory at various stages through the
# detection process. (Somewhat slow).
